---
- name: Collect system data from Windows EC2 machines
  hosts: all
  gather_facts: yes
  vars:
    reports_dir: "./reports"

  tasks:
    - name: Ensure reports directory exists on control node
      local_action:
        module: file
        path: "{{ reports_dir }}"
        state: directory
        mode: '0755'
      run_once: true

    # ---------------- CPU Section ----------------
    - name: Gather CPU usage for Windows
      win_shell: |
        $cpu = Get-Counter '\Processor(_Total)\% Idle Time'
        [math]::Round(100 - $cpu.CounterSamples.CookedValue, 2)
      register: cpu_used_windows
      changed_when: false

    - name: Gather CPU info (hardware + usage)
      set_fact:
        cpu_info:
          processor_model: "{{ ansible_facts.processor[-1] | default('unknown') }}"
          cores_per_cpu: "{{ ansible_facts.processor_cores | default(omit) }}"
          cpu_count: "{{ ansible_facts.processor_count | default(omit) }}"
          cpu_used_percent: "{{ cpu_used_windows.stdout | default('0') }}"
          cpu_free_percent: "{{ (100 - (cpu_used_windows.stdout | float)) | round(2) }}"

    # ---------------- Memory Section ----------------
    - name: Gather Memory info
      win_shell: |
        $mem = Get-CimInstance -ClassName Win32_OperatingSystem
        $total = [math]::Round($mem.TotalVisibleMemorySize / 1024, 2)
        $free = [math]::Round($mem.FreePhysicalMemory / 1024, 2)
        $used = [math]::Round($total - $free, 2)
        $swap = Get-CimInstance -ClassName Win32_PageFileUsage
        $swap_total = if ($swap -ne $null) { [math]::Round($swap.AllocatedBaseSize, 2) } else { 0 }
        $swap_free = 0 # Windows does not expose swap free easily
        [PSCustomObject]@{
          total_mb = $total
          free_mb = $free
          used_mb = $used
          swap_total_mb = $swap_total
          swap_free_mb = $swap_free
        } | ConvertTo-Json -Compress
      register: memory_info_raw
      changed_when: false

    - name: Set memory_info fact from JSON
      set_fact:
        memory_info: "{{ memory_info_raw.stdout | from_json }}"

    # ---------------- Disk Section ----------------
    - name: Get Windows logical disks info as JSON
      win_shell: |
        Get-CimInstance -ClassName Win32_LogicalDisk | 
        Select-Object DeviceID, @{Name='Size';Expression={[int64]($_.Size)}}, @{Name='FreeSpace';Expression={[int64]($_.FreeSpace)}} |
        ConvertTo-Json -Compress
      register: disks_raw
      changed_when: false

    - name: Normalize disk facts to list
      set_fact:
        disk_list: >-
          {% if disks_raw.stdout == 'null' or disks_raw.stdout|length == 0 %}
            []
          {% else %}
            {% set disks = disks_raw.stdout | from_json %}
            {% if disks is mapping %}
              [disks]
            {% else %}
              disks
            {% endif %}
          {% endif %}

    - name: Set disk_info fact based on logical disks data
      set_fact:
        disk_info:
          mounts: "{{ disk_list }}"
          primary_mount:
            mount_point: "{{ disk_list[0].DeviceID if disk_list | length > 0 else 'C:' }}"
            total_gb: >-
              {% if disk_list | length > 0 %}
                {{ (disk_list[0].Size | float / 1024 / 1024 / 1024) | round(2) }}
              {% else %}
                0
              {% endif %}
            free_gb: >-
              {% if disk_list | length > 0 %}
                {{ (disk_list[0].FreeSpace | float / 1024 / 1024 / 1024) | round(2) }}
              {% else %}
                0
              {% endif %}
            used_gb: >-
              {% if disk_list | length > 0 %}
                {{ ((disk_list[0].Size - disk_list[0].FreeSpace) / 1024 / 1024 / 1024) | round(2) }}
              {% else %}
                0
              {% endif %}

    # ---------------- Save Per-Host JSON ----------------
    - name: Build report entry and write to control node (JSON)
      local_action:
        module: copy
        content: "{{ {
                    'hostname': inventory_hostname,
                    'ansible_facts': {
                      'nodename': ansible_facts.nodename | default(inventory_hostname)
                    },
                    'cpu': cpu_info,
                    'memory': memory_info,
                    'disk': disk_info
                  } | to_nice_json }}"
        dest: "{{ reports_dir }}/{{ inventory_hostname }}.json"
      run_once: false

# ---------------- HTML Report Builder ----------------
- name: Build combined HTML report on control node and deploy to web root
  hosts: localhost
  gather_facts: no
  vars:
    reports_dir: "./reports"
    html_dest: "/var/www/html/system_report.html"

  tasks:
    - name: Get list of per-host JSON reports
      local_action:
        module: command
        argv:
          - /bin/ls
          - -1
          - "{{ reports_dir }}"
      register: report_files
      failed_when: false
      changed_when: false

    - name: Read JSON report files into a list
      set_fact:
        all_reports: "{{ all_reports | default([]) + [ lookup('file', reports_dir + '/' + item) | from_json ] }}"
      loop: "{{ report_files.stdout_lines | default([]) }}"

    - name: Render HTML report (template)
      template:
        src: "templates/system_report.html.j2"
        dest: "{{ html_dest }}"
        mode: '0644'
      vars:
        reports: "{{ all_reports | sort(attribute='hostname') }}"
      become: yes

